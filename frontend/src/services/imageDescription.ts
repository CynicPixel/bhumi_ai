/**
 * Image Description Service using Google Gemini 1.5 Flash
 * Converts images to textual descriptions before sending to orchestrator
 */

export interface ImageDescriptionResponse {
  description: string;
  success: boolean;
  error?: string;
}

export class ImageDescriptionService {
  private apiKey: string;
  private baseUrl: string = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent';

  constructor(apiKey?: string) {
    // Try to get API key from multiple sources
    this.apiKey = apiKey || 
                  process.env.NEXT_PUBLIC_GEMINI_API_KEY || 
                  process.env.GOOGLE_API_KEY || 
                  '';
    
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è Gemini API key not found. Please set NEXT_PUBLIC_GEMINI_API_KEY in .env.local');
    } else {
      console.log('‚úÖ Gemini API key loaded successfully');
    }
  }

  /**
   * Describe an image using Gemini 1.5 Flash
   * @param base64Image - Base64 encoded image string (with data: prefix)
   * @param customPrompt - Optional custom prompt for image description
   * @returns Promise with image description
   */
  async describeImage(
    base64Image: string, 
    customPrompt?: string
  ): Promise<ImageDescriptionResponse> {
    if (!this.apiKey) {
      return {
        success: false,
        description: '',
        error: 'Gemini API key not configured. Please set NEXT_PUBLIC_GEMINI_API_KEY in .env.local file.'
      };
    }

    try {
      // Extract the base64 data without the data:image/type;base64, prefix
      const base64Data = base64Image.includes(',') 
        ? base64Image.split(',')[1] 
        : base64Image;

      // Determine image format from the data URL
      const mimeType = base64Image.includes('data:image/') 
        ? base64Image.split(';')[0].split(':')[1]
        : 'image/jpeg';

      const prompt = customPrompt || `Please provide a detailed description of this agricultural image. 
      Focus on:
      - What crops, plants, or agricultural elements are visible
      - The condition of the crops (healthy, diseased, pest damage, etc.)
      - Environmental factors (soil condition, weather effects, irrigation, etc.)
      - Any agricultural equipment or tools present
      - Overall agricultural context and farming practices shown
      
      Provide a comprehensive but concise description that would be useful for agricultural analysis.`;

      const requestBody = {
        contents: [
          {
            parts: [
              {
                text: prompt
              },
              {
                inline_data: {
                  mime_type: mimeType,
                  data: base64Data
                }
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.4,
          topK: 32,
          topP: 1,
          maxOutputTokens: 1024,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      };

      console.log('ü§ñ Calling Gemini 1.5 Flash for image description...');
      
      const response = await fetch(`${this.baseUrl}?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Gemini API error:', response.status, errorText);
        
        return {
          success: false,
          description: '',
          error: `Gemini API error: ${response.status} - ${errorText}`
        };
      }

      const data = await response.json();
      console.log('‚úÖ Gemini response:', data);

      // Extract the generated text from the response
      const description = data.candidates?.[0]?.content?.parts?.[0]?.text || '';
      
      if (!description) {
        return {
          success: false,
          description: '',
          error: 'No description generated by Gemini'
        };
      }

      return {
        success: true,
        description: description.trim(),
      };

    } catch (error) {
      console.error('‚ùå Error describing image:', error);
      return {
        success: false,
        description: '',
        error: error instanceof Error ? error.message : 'Unknown error occurred'
      };
    }
  }

  /**
   * Check if the service is properly configured
   */
  isConfigured(): boolean {
    return !!this.apiKey;
  }

  /**
   * Set or update the API key
   */
  setApiKey(apiKey: string): void {
    this.apiKey = apiKey;
  }
}

// Singleton instance
export const imageDescriptionService = new ImageDescriptionService();
